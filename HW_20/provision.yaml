---
- hosts: all
  become: true
  tasks:
    - name: yum install epl
      yum:
        name:
          - epel-release
    - name: yum install 
      yum:
        name:
          - fping
          - libselinux-python
          - mtr
          - tcpdump
          - nc

- hosts: routers
  become: true
  handlers:
    - name: restart network
      systemd:
        name: NetworkManager
        state: restarted

  tasks:
    - name: yum install
      yum:
        name:
          - tmux
          - NetworkManager-config-routing-rules
    - name: start and enable NetworkManager-dispatcher
      systemd:
        name: NetworkManager-dispatcher
        state: started
        enabled: true
    - name: sysctl config
      ansible.posix.sysctl: 
        name: net.ipv4.conf.all.forwarding
        value: '1'
        sysctl_set: yes
        state: present
        reload: true
    - name: config lineinfile 
      lineinfile:
        path: "{{ item.path }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        create: true
      loop: "{{ lineinfile | default([])}}"
      when: lineinfile | default('', false)
      notify:
        - restart network

   # iptables -t nat -A PREROUTING -p tcp -d $EXT_R_IP --dport $PORT1 -j DNAT --to-destination $LOCAL_IP:$PORT2
        # iptables -A FORWARD -i eth0 -d $LOCAL_IP -p tcp --dport $PORT2 -j ACCEPT
- hosts: inetRouter2
  become: true
  handlers:
    - name: save iptables
      community.general.iptables_state:
        state: saved
        path: /etc/sysconfig/iptables
  tasks:
    # iptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o eth0 -j MASQUERADE
    - name: Create Iptables NAT chain
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: 'eth2'
        source: '0.0.0.0/0'
        destination: '192.168.0.2/32'
        jump: MASQUERADE
        protocol: 'tcp'
        comment: Ansible NAT Masquerade
      notify:
        - save iptables
    - name: forvording 80 to 8080
      iptables:
        table: nat
        chain: PREROUTING
        in_interface: eth1
        protocol: tcp
        match: tcp
        destination_port: "80"
        jump: DNAT
        to_destination: "192.168.0.2:8080"
        comment: Redirect web traffic to port 8080
      notify:
        - save iptables

- hosts: inetRouter
  become: true
  handlers:
    - name: save iptables
      community.general.iptables_state:
        state: saved
        path: /etc/sysconfig/iptables
    - name: restart sysvi
      sysvinit:
        name: network
        state: restarted
        
  tasks:
    # iptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o eth0 -j MASQUERADE
    - name: Create Iptables NAT chain
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: 'eth0'
        source: '0.0.0.0/0'
        destination: '!192.168.0.0/16'
        jump: MASQUERADE
        protocol: 'all'
        comment: Ansible NAT Masquerade
      notify:
        - save iptables
    - name: config lineinfile systemV
      lineinfile:
        path: "{{ item.path }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        create: true
      loop: "{{ lineinfile }}"
      notify: 
        - restart sysvi
    - name: sysctl config
      ansible.posix.sysctl: 
        name: net.ipv4.conf.all.forwarding
        value: '1'
        sysctl_set: yes
        state: present
        reload: true

- hosts: servers
  handlers:
    - name: restart network
      systemd:
        name: NetworkManager
        state: restarted
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted

  become: true
  tasks:
    - name: yum install
      yum:
        name:
          - tmux
          - NetworkManager-config-routing-rules
          - nginx
    - name: start and enable NetworkManager-dispatcher
      systemd:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - nginx
        - NetworkManager-dispatcher
    - name: config lineinfile 
      lineinfile:
        path: "{{ item.path }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        create: true
      loop: "{{ lineinfile | default([])}}"
      when: lineinfile | default('', false)
      notify:
        - restart network
    - name: config  nginx 8080
      lineinfile:
        path: "/etc/nginx/nginx.conf"
        regexp: "listen       80 default_server;"
        line: "listen 8080 default_server;"
      notify:
        - restart nginx


- hosts: all
  become: true
  tasks:
    - name: restart network
      sysvinit:
        name: network
        state: restarted